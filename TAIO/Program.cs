using TAIO;

//int[][] A =
//{
//    { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//    { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
//    { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//    { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
//    { 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0 },
//    { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 },
//    { 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0 },
//    { 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0 },
//    { 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0 },
//    { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1 },
//    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1 },
//    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
//};

//int[][] B =
//{
//    { 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0 },
//    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
//    { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
//    { 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 },
//    { 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0 },
//    { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
//    { 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
//    { 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//    { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1 },
//    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
//    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
//};

int[,] A =
{
    { 0, 1, 0, 1, 0},
    { 1, 0, 1, 1, 0},
    { 0, 1, 0, 1, 1},
    { 1, 1, 2, 0, 0},
    { 0, 1, 1, 0, 0},
};

int[,] B =
{
    { 0, 2, 1, 0},
    { 1, 0, 1, 0},
    { 1, 1, 0, 1},
    { 0, 0, 1, 0},
};

//int[,] A =
//{
//    { 0, 0, 0, 0, 0},
//    { 0, 0, 0, 0, 0},
//    { 0, 0, 0, 0, 0},
//    { 0, 0, 0, 0, 0},
//    { 0, 0, 0, 0, 0},
//};

//int[,] B =
//{
//    { 0, 0, 0, 0},
//    { 0, 0, 0, 0},
//    { 0, 0, 0, 0},
//    { 0, 0, 0, 0},
//};

//int[,] A =
//{
//    { 0, 1, 0, 0, 0},
//    { 0, 0, 0, 1, 0},
//    { 0, 0, 0, 0, 1},
//    { 0, 1, 1, 0, 0},
//    { 0, 1, 0, 1, 0},
//};

//int[,] B =
//{
//    { 0, 0, 0, 0, 0, 0},
//    { 0, 0, 0, 0, 0, 1},
//    { 0, 0, 0, 0, 1, 0},
//    { 0, 1, 0, 0, 1, 0},
//    { 0, 0, 0, 1, 0, 0},
//    { 0, 0, 0, 0, 1, 0},
//};

MaxCommonSubgraph.FindExact(A, B);
